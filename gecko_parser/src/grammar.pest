
/* File
 * 
 * Root of the AST
 * A list of statements
 *
 */

file                        =  { statements }
statements                  = _{ SOI ~ statement* ~ EOI }

// Code block 
block                       =  { lbrace ~ NEWLINE* ~ statement* ~ rbrace }
// Modifiers
external                    =  { extern_token }

// Statement Types
statement                   = _{ NEWLINE* ~ ( simple_statement | compound_statement /**/ | decorator /**/ ) ~ NEWLINE* }
simple_statement            = _{ small_statement ~ semicolon }
small_statement             = _{ type_statement | return_statement | variable_initialisation | variable_declaration | expression_statement }
compound_statement          = _{ function_definition | function_declaration }

// Compound Statement Grammars
function_definition         =  { external? ~ proc_token ~ identifier ~ parameter_list ~ output ~ NEWLINE? ~ block }
function_declaration        =  { external? ~ proc_token ~ identifier ~ parameter_list ~ output ~ semicolon }

// Small Statement Grammars
expression_statement        =  { expression }
return_statement            =  { (return_token | larrow) ~ expression }
type_statement              =  { type_token ~ identifier ~ colon ~ type_specifier }

variable_declaration        =  { let_token ~ typed_identifier }
variable_initialisation     =  { let_token ~ typed_identifier ~ equals ~ expression }

// Objects
output                      =  { rarrow ~ type_specifier }

parameter_list              =  { lparen ~ (parameter ~ ( comma ~ parameter )*)? ~ rparen }
parameter                   =  { typed_identifier }

typed_identifier_list       = _{ (typed_identifier ~ ( comma ~ typed_identifier )*)? }
typed_identifier            = _{ identifier ~ colon ~ type_specifier }

variable                    = _{ identifier }

expression                  =  { infix }
infix                       = _{ term ~ (binary_operator ~ term)* }
term                        =  { call | literal | unary | variable | braced_expression }
braced_expression           = _{ "(" ~ expression ~ ")" }
unary                       =  { unary_operator ~ ( literal | variable ) }

literal                     = _{ /* class_constructor | struct_constructor | array | */ byte | string | float | integer | boolean }

// TODO: dotted and scopes
// dotted                      =  { identifier }

call                        =  { identifier ~ lparen ~ call_parameter_list* ~ rparen}
call_parameter_list         =  { call_parameter ~ (comma ~ call_parameter)* }
call_parameter              =  { expression }

// Types
type_specifier              = _{ data_type | immutable_type }
immutable_type              =  { logical_not ~ data_type }
data_type                   = _{ type_name | array_type | pointer_type }

pointer_type                =  { star ~ data_type}
array_type                  =  { (lbracket ~ data_type ~ rbracket)
                               | (lbracket ~ data_type ~ semicolon ~ integer ~ rbracket) }

type_name                   = _{ identifier }

// Reserved Keywords
WHITESPACE                  = _{ (" " | "\t" | "\r")+ }
COMMENT                     = _{ comment_block | comment_line }
comment_line                = @{ "//" ~ (!"\n" ~ ANY)* }
comment_block               = @{"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
keyword                     =  { let_token | proc_token | return_token | extern_token | type_token }

decorator                   =  { "#[" ~ expression ~ "]" }

let_token                   =  { "let" }
proc_token                  =  { "proc" }
type_token                  =  { "type" }
return_token                =  { "return" }
extern_token                =  { "extern" }



// Literals

integer                     = ${ integer_hexadecimal_sigil | integer_octal_sigil | integer_binary_sigil | integer_decimal | integer_zero }
integer_decimal             =  { '1'..'9' ~ ('0'..'9' | "_")* }
integer_hexadecimal         =  { ('0'..'9' | 'a'..'f' | 'A'..'F') ~ ('0'..'9' | 'a'..'f' | 'A'..'F' | "_")* }
integer_hexadecimal_sigil   = _{ "0x" ~ integer_hexadecimal }
integer_octal               =  { ('0'..'7') ~ ('0'..'7' | "_" )* }
integer_octal_sigil         = _{ "0o" ~ integer_octal }
integer_binary              =  { ('0'..'1') ~ ('0'..'1' | "_")* }
integer_binary_sigil        = _{ "0b" ~ integer_binary }
integer_zero                =  { "0" }

float                       = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
identifier                  = @{ (!keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) }

string                      = ${ string_single_line }
string_single_line          = _{ string_delimiter ~ string_content ~ string_delimiter }
string_content              = ${ (string_escape | !(string_delimiter | "\\") ~ ANY)* }
string_delimiter            = _{ "\"" }
string_unicode              = _{ "u" ~ ('0'..'9' | 'a'..'f' | 'A'..'F'){4} }
string_escape               = _{ "\\" ~ ("\"" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | string_unicode) }

byte                        =  { singlequote ~ byte_content ~ singlequote}
byte_content                =  { ANY }
boolean                     =  { boolean_true | boolean_false }
boolean_true                =  { "true" }
boolean_false               =  { "false" }
null                        =  { "null" }

logical_not                 =  { "!" }
exponent                    =  { "**" }
multiply                    =  { "*" }
divide                      =  { "/" }
modulus                     =  { "%" }
plus                        =  { "+" }
minus                       =  { "-" }
shift_left                  =  { "<<" }
shift_right                 =  { ">>" }
bitwise_and                 =  { "&" }
bitwise_or                  =  { "|" }
bitwise_xor                 =  { "^" }
less_than                   =  { "<" }
greater_than                =  { ">" }
less_than_or_equal          =  { "<=" }
greater_than_or_equal       =  { ">=" }
not_equal                   =  { "!=" }
equal                       =  { "==" }
logical_and                 =  { "&&" }
logical_or                  =  { "||" }
assign                      =  { "=" }
all_operators               = _{
                                 exponent |
                                 multiply | divide | modulus |
                                 plus | minus |
                                 shift_left | shift_right |
                                 less_than_or_equal | less_than |
                                 greater_than_or_equal | greater_than |
                                 not_equal | equal |
                                 logical_and | logical_or | logical_not |
                                 bitwise_and | bitwise_or | bitwise_xor |
                                 assign
                                }
binary_operator             = _{
                                 exponent |
                                 multiply | divide | modulus |
                                 plus | minus |
                                 shift_left | shift_right |
                                 less_than_or_equal | less_than |
                                 greater_than_or_equal | greater_than |
                                 not_equal | equal |
                                 logical_and | logical_or |
                                 bitwise_and | bitwise_or | bitwise_xor
                               }
unary_operator              = _{ plus | minus | logical_not }

assignment                  =  { equals | "+=" | "-=" | "*=" | "/=" | "%=" }
equals                      =  { "=" }

star                        =  { "*" }
semicolon                   =  { ";" }
colon                       =  { ":" }
doublecolon                 =  { "::" }
comma                       =  { "," }
dot                         =  { "." }
lbracket                    =  { "[" }
rbracket                    =  { "]" }
lparen                      =  { "(" }
rparen                      =  { ")" }
lbrace                      =  { "{" }
rbrace                      =  { "}" }

rarrow                      =  { "->" }
larrow                      =  { "<-"}

langlebracket               =  { "<" }
ranglebracket               =  { ">" }

singlequote                 =  { "'" }
doublequote                 =  { "\"" }